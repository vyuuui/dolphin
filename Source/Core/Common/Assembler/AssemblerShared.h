#pragma once

#include <cstddef>
#include <cstdint>
#include <string>
#include <string_view>
#include <variant>

#include "Common/CommonTypes.h"

namespace Common::GekkoAssembler
{
struct Interval
{
  size_t begin, len;
};

struct AssemblerError
{
  std::string message;
  std::string_view error_line;
  size_t line, col, len;

  std::string FormatError() const;
};

template <typename Tag, typename T>
using Tagged = std::pair<Tag, T>;
template <typename Tag, typename T>
constexpr Tag const& tag_of(Tagged<Tag, T> const& val)
{
  return std::get<0>(val);
}
template <typename Tag, typename T>
constexpr Tag& tag_of(Tagged<Tag, T>& val)
{
  return std::get<0>(val);
}
template <typename Tag, typename T>
constexpr T const& value_of(Tagged<Tag, T> const& val)
{
  return std::get<1>(val);
}
template <typename Tag, typename T>
constexpr T& value_of(Tagged<Tag, T>& val)
{
  return std::get<1>(val);
}

template <typename T>
using FailureOr = std::variant<AssemblerError, T>;
template <typename T>
constexpr bool is_failure(FailureOr<T> const& var)
{
  return std::holds_alternative<AssemblerError>(var);
}
template <typename T>
constexpr AssemblerError const& get_failure(FailureOr<T> const& var)
{
  return std::get<AssemblerError>(var);
}
template <typename T>
constexpr AssemblerError& get_failure(FailureOr<T>& var)
{
  return std::get<AssemblerError>(var);
}
template <typename T>
constexpr T const& get_t(FailureOr<T> const& var)
{
  return std::get<T>(var);
}
template <typename T>
constexpr T& get_t(FailureOr<T>& var)
{
  return std::get<T>(var);
}

constexpr size_t kPlainMnemonic = 0x0;
constexpr size_t kRecordBit = 0x1;
constexpr size_t kOverflowExceptionBit = 0x2;
// Since RC/OE are mutually exclusive from LK/AA, they can occupy the same slot
constexpr size_t kLinkBit = 0x1;
constexpr size_t kAbsoluteAddressBit = 0x2;

constexpr size_t kVariantPermutations = 4;

enum class GekkoDirective
{
  kByte, k2byte, k4byte, k8byte,
  kFloat, kDouble, kLocate, kPadAlign,
  kAlign, kZeros, kSkip, kDefVar,
  kAscii, kAsciz
};

enum class GekkoMnemonic : size_t
{
  kAdd,
  kAddc,
  kAdde,
  kAddi,
  kAddic,
  kAddicDot,
  kAddis,
  kAddme,
  kAddze,
  kDivw,
  kDivwu,
  kMulhw,
  kMulhwu,
  kMulli,
  kMullw,
  kNeg,
  kSubf,
  kSubfc,
  kSubfe,
  kSubfic,
  kSubfme,
  kSubfze,
  kCmp,
  kCmpi,
  kCmpl,
  kCmpli,
  kAnd,
  kAndc,
  kAndiDot,
  kAndisDot,
  kCntlzw,
  kEqv,
  kExtsb,
  kExtsh,
  kNand,
  kNor,
  kOr,
  kOrc,
  kOri,
  kOris,
  kXor,
  kXori,
  kXoris,
  kRlwimi,
  kRlwinm,
  kRlwnm,
  kSlw,
  kSraw,
  kSrawi,
  kSrw,
  kFadd,
  kFadds,
  kFdiv,
  kFdivs,
  kFmul,
  kFmuls,
  kFres,
  kFrsqrte,
  kFsub,
  kFsubs,
  kFsel,
  kFmadd,
  kFmadds,
  kFmsub,
  kFmsubs,
  kFnmadd,
  kFnmadds,
  kFnmsub,
  kFnmsubs,
  kFctiw,
  kFctiwz,
  kFrsp,
  kFcmpo,
  kFcmpu,
  kMcrfs,
  kMffs,
  kMtfsb0,
  kMtfsb1,
  kMtfsf,
  kMtfsfi,
  kLbz,
  kLbzu,
  kLbzux,
  kLbzx,
  kLha,
  kLhau,
  kLhaux,
  kLhax,
  kLhz,
  kLhzu,
  kLhzux,
  kLhzx,
  kLwz,
  kLwzu,
  kLwzux,
  kLwzx,
  kStb,
  kStbu,
  kStbux,
  kStbx,
  kSth,
  kSthu,
  kSthux,
  kSthx,
  kStw,
  kStwu,
  kStwux,
  kStwx,
  kLhbrx,
  kLwbrx,
  kSthbrx,
  kStwbrx,
  kLmw,
  kStmw,
  kLswi,
  kLswx,
  kStswi,
  kStswx,
  kEieio,
  kIsync,
  kLwarx,
  kStwcxDot,
  kSync,
  kLfd,
  kLfdu,
  kLfdux,
  kLfdx,
  kLfs,
  kLfsu,
  kLfsux,
  kLfsx,
  kStfd,
  kStfdu,
  kStfdux,
  kStfdx,
  kStfiwx,
  kStfs,
  kStfsu,
  kStfsux,
  kStfsx,
  kFabs,
  kFmr,
  kFnabs,
  kFneg,
  kB,
  kBc,
  kBcctr,
  kBclr,
  kCrand,
  kCrandc,
  kCreqv,
  kCrnand,
  kCrnor,
  kCror,
  kCrorc,
  kCrxor,
  kMcrf,
  kRfi,
  kSc,
  kTw,
  kTwi,
  kMcrxr,
  kMfcr,
  kMfmsr,
  kMfspr_nobitswap,
  kMftb_nobitswap,
  kMtcrf,
  kMtmsr,
  kMtspr_nobitswap,
  kDcbf,
  kDcbi,
  kDcbst,
  kDcbt,
  kDcbtst,
  kDcbz,
  kIcbi,
  kMfsr,
  kMfsrin,
  kMtsr,
  kMtsrin,
  kTlbie,
  kTlbsync,
  kEciwx,
  kEcowx,
  kPsq_lx,
  kPsq_stx,
  kPsq_lux,
  kPsq_stux,
  kPsq_l,
  kPsq_lu,
  kPsq_st,
  kPsq_stu,
  kPs_div,
  kPs_sub,
  kPs_add,
  kPs_sel,
  kPs_res,
  kPs_mul,
  kPs_rsqrte,
  kPs_msub,
  kPs_madd,
  kPs_nmsub,
  kPs_nmadd,
  kPs_neg,
  kPs_mr,
  kPs_nabs,
  kPs_abs,
  kPs_sum0,
  kPs_sum1,
  kPs_muls0,
  kPs_muls1,
  kPs_madds0,
  kPs_madds1,
  kPs_cmpu0,
  kPs_cmpo0,
  kPs_cmpu1,
  kPs_cmpo1,
  kPs_merge00,
  kPs_merge01,
  kPs_merge10,
  kPs_merge11,
  kDcbz_l,
  kLastMnemonic = kDcbz_l,
  kInvalidMnemonic,
};

enum class ExtendedGekkoMnemonic : size_t
{
  kSubi,
  kSubis,
  kSubic,
  kSubicDot,
  kSub,
  kSubc,
  kCmpwi,
  kCmpw,
  kCmplwi,
  kCmplw,
  kExtlwi,
  kExtrwi,
  kInslwi,
  kInsrwi,
  kRotlwi,
  kRotrwi,
  kRotlw,
  kSlwi,
  kSrwi,
  kClrlwi,
  kClrrwi,
  kClrlslwi,
  kBt,
  kBf,
  kBdnz,
  kBdnzt,
  kBdnzf,
  kBdz,
  kBdzt,
  kBdzf,
  kBtPredict,
  kBfPredict,
  kBdnzPredict,
  kBdnztPredict,
  kBdnzfPredict,
  kBdzPredict,
  kBdztPredict,
  kBdzfPredict,
  kBlr,
  kBtlr,
  kBflr,
  kBdnzlr,
  kBdnztlr,
  kBdnzflr,
  kBdzlr,
  kBdztlr,
  kBdzflr,
  kBtlrPredict,
  kBflrPredict,
  kBdnzlrPredict,
  kBdnztlrPredict,
  kBdnzflrPredict,
  kBdzlrPredict,
  kBdztlrPredict,
  kBdzflrPredict,
  kBctr,
  kBtctr,
  kBfctr,
  kBtctrPredict,
  kBfctrPredict,
  kBlt,
  kBle,
  kBeq,
  kBge,
  kBgt,
  kBnl,
  kBne,
  kBng,
  kBso,
  kBns,
  kBun,
  kBnu,
  kBltPredict,
  kBlePredict,
  kBeqPredict,
  kBgePredict,
  kBgtPredict,
  kBnlPredict,
  kBnePredict,
  kBngPredict,
  kBsoPredict,
  kBnsPredict,
  kBunPredict,
  kBnuPredict,
  kBltlr,
  kBlelr,
  kBeqlr,
  kBgelr,
  kBgtlr,
  kBnllr,
  kBnelr,
  kBnglr,
  kBsolr,
  kBnslr,
  kBunlr,
  kBnulr,
  kBltlrPredict,
  kBlelrPredict,
  kBeqlrPredict,
  kBgelrPredict,
  kBgtlrPredict,
  kBnllrPredict,
  kBnelrPredict,
  kBnglrPredict,
  kBsolrPredict,
  kBnslrPredict,
  kBunlrPredict,
  kBnulrPredict,
  kBltctr,
  kBlectr,
  kBeqctr,
  kBgectr,
  kBgtctr,
  kBnlctr,
  kBnectr,
  kBngctr,
  kBsoctr,
  kBnsctr,
  kBunctr,
  kBnuctr,
  kBltctrPredict,
  kBlectrPredict,
  kBeqctrPredict,
  kBgectrPredict,
  kBgtctrPredict,
  kBnlctrPredict,
  kBnectrPredict,
  kBngctrPredict,
  kBsoctrPredict,
  kBnsctrPredict,
  kBunctrPredict,
  kBnuctrPredict,
  kCrset,
  kCrclr,
  kCrmove,
  kCrnot,
  kTwlt,
  kTwlti,
  kTwle,
  kTwlei,
  kTweq,
  kTweqi,
  kTwge,
  kTwgei,
  kTwgt,
  kTwgti,
  kTwnl,
  kTwnli,
  kTwne,
  kTwnei,
  kTwng,
  kTwngi,
  kTwllt,
  kTwllti,
  kTwlle,
  kTwllei,
  kTwlge,
  kTwlgei,
  kTwlgt,
  kTwlgti,
  kTwlnl,
  kTwlnli,
  kTwlng,
  kTwlngi,
  kTrap,
  kMtxer,
  kMfxer,
  kMtlr,
  kMflr,
  kMtctr,
  kMfctr,
  kMtdsisr,
  kMfdsisr,
  kMtdar,
  kMfdar,
  kMtdec,
  kMfdec,
  kMtsdr1,
  kMfsdr1,
  kMtsrr0,
  kMfsrr0,
  kMtsrr1,
  kMfsrr1,
  kMtasr,
  kMfasr,
  kMtear,
  kMfear,
  kMttbl,
  kMftbl,
  kMttbu,
  kMftbu,
  kMtsprg,
  kMfsprg,
  kMtibatu,
  kMfibatu,
  kMtibatl,
  kMfibatl,
  kMtdbatu,
  kMfdbatu,
  kMtdbatl,
  kMfdbatl,
  kNop,
  kLi,
  kLis,
  kLa,
  kMr,
  kNot,
  kMtcr,
  kMfspr,
  kMftb,
  kMtspr,
  kLastMnemonic = kMtspr,
  kInvalidMnemonic
};

constexpr size_t kNumMnemonics = static_cast<size_t>(GekkoMnemonic::kLastMnemonic) + 1;
constexpr size_t kNumExtMnemonics = static_cast<size_t>(ExtendedGekkoMnemonic::kLastMnemonic) + 1;
}  // namespace Common::GekkoAssembler
